{
  "swagger": "2.0",
  "info": {
    "description": "API BLE Server for SURIOTA Gateway\n\n1. **Server Advertising**: The ESP32 BLE server begins advertising its presence.\n2. **Client Discovery**: The client searches for available BLE servers.\n3. **Connection Attempt**: The client selects the ESP32 BLE server and attempts to connect.\n4. **Passkey Generation**: The ESP32 BLE server generates a passkey independently, and the client generates its own passkey.\n5. **User Interaction**: A popup appears on the client for passkey entry.\n6. **Passkey Input**: The client automatically fills in the passkey generated by itself into the popup and sends it to the ESP32 BLE server.\n7. **Passkey Comparison**: The ESP32 BLE server compares the received passkey from the client with its own generated passkey.\n8. **Authentication and Bonding**: If the passkeys match, the devices are authenticated and bonded.\n\nService UUID: \"4fafc201-1fb5-459e-8fcc-c5c9c331914b\"\nCharacteristic UUID 1: \"beb5483e-36e1-4688-b7f5-ea07361b26a8\"\nCharacteristic UUID 2: \"aeb5483e-36e1-4688-b7f5-ea07361b26b9\"\nCharacteristic UUID 3: \"ceb5483e-36e1-4688-b7f5-ea07361b26c0\"\nCharacteristic UUID 4: \"deb5483e-36e1-4688-b7f5-ea07361b26d1\"",
    "version": "V1.0.0",
    "title": "SURIOTA Gateway"
  },
  "tags": [
    {
      "name": "Connection Devices",
      "description": "UUID: beb5483e-36e1-4688-b7f5-ea07361b26a8"
    },
    {
      "name": "Data Modbus Configuration",
      "description": "UUID: aeb5483e-36e1-4688-b7f5-ea07361b26b9"
    },
    {
      "name": "Internet Configuration",
      "description": "UUID: ceb5483e-36e1-4688-b7f5-ea07361b26c0"
    },
    {
      "name": "Logging",
      "description": "UUID: deb5483e-36e1-4688-b7f5-ea07361b26d1"
    }
  ],
  "paths": {
    "/ble/connection_devices/read": {
      "get": {
        "tags": ["Connection Devices"],
        "summary": "Read Connection Devices",
        "description": "Retrieve the current configuration of the connection devices.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "If `connection_type` is `RTU`, then the following keys are required: baud rate, data bits, parity, and stop bits. If `connection_type` is `TCP/IP`, then the following keys are required: IP address, server port, connect timeout, and protocol version.",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "device_name": "Sensor Environment",
                "connection_type": "RTU",
                "baud_rate": 9600,
                "bit_data": 8,
                "parity": "N",
                "stop_bit": 1
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration data successfully obtained"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ble/connection_devices/write": {
      "post": {
        "tags": ["Connection Devices"],
        "summary": "Write Connection Devices",
        "description": "Send the connection devices configuration to the client.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Connection devices configuration",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "device_name": {"type": "string"},
                "connection_type": {"type": "string"},
                "baud_rate": {"type": "integer"},
                "bit_data": {"type": "integer"},
                "parity": {"type": "string"},
                "stop_bit": {"type": "integer"}
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data successfully sent to the client."
          },
          "400": {
            "description": "Invalid data"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ble/data_modbus_config/read": {
      "get": {
        "tags": ["Data Modbus Configuration"],
        "summary": "Read Data Modbus Config",
        "description": "Retrieve the current configuration of the data modbus.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The value of `device_name` must match one of the device names listed in Connection Devices.",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "device_name": "Sensor Environment",
                "slave_id": 1,
                "function": "INPUT_REGISTERS",
                "address": "0x0001",
                "data_name": "Temperature",
                "data_type": "INT16"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration data successfully obtained"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ble/data_modbus_config/write": {
      "post": {
        "tags": ["Data Modbus Configuration"],
        "summary": "Write Data Modbus Config",
        "description": "Send the Data Modbus configuration to the client.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Adding `value` and `timestamp` keys after retrieving data from the Modbus device",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "device_name": {"type": "string"},
                "slave_id": {"type": "integer"},
                "function": {"type": "string"},
                "address": {"type": "string"},
                "data_name": {"type": "string"},
                "data_type": {"type": "string"},
                "value": {"type": "number"},
                "timestamp": {"type": "integer"}
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data successfully sent to the client."
          },
          "400": {
            "description": "Invalid data"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ble/internet_config/read": {
      "get": {
        "tags": ["Internet Configuration"],
        "summary": "Read Internet Config",
        "description": "Retrieve the current configuration of the internet connection.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "If `communication_mode` is `Ethernet`, no additional keys are required. If `communication_mode` is `TCP/IP`, then wifi ssid and wifi password are required.\n If `protocol` is `MQTT`, then then the following keys are required: server name, port, client id, and qos level. If server authentication is needed, mqtt username and mqtt password are also required.\n If `protocol` is `HTTP`, then server url (including access token) is required. If server authentication is needed, token bearer is also required.",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "communication_mode": "WiFi",
                "wifi_ssid": "MyWiFiNetwork",
                "wifi_password": "MyWiFiPassword",
                "protocol": "MQTT",
                "server_name": "broker.hivemq.com",
                "port": 1883,
                "client_id": "ESP32Client",
                "qos_level": 1,
                "auth": true,
                "mqtt_username": "mqtt_user",
                "mqtt_password": "mqtt_pass",
                "interval": 60
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration data successfully obtained"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ble/internet_config/write": {
      "post": {
        "tags": ["Internet Configuration"],
        "summary": "Write Internet Config",
        "description": "Send the Internet configuration to the client.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Internet configuration",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "communication_mode": {"type": "string"},
                "ssid": {"type": "string"},
                "wifi_password": {"type": "string"},
                "protocol": {"type": "string"},
                "server_name": {"type": "string"},
                "port": {"type": "integer"},
                "client_id": {"type": "string"},
                "qos_level": {"type": "integer"},
                "auth": {"type": "boolean"},
                "mqtt_username": {"type": "string"},
                "mqtt_password": {"type": "string"},
                "interval": {"type": "integer"}
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data successfully sent to the client."
          },
          "400": {
            "description": "Invalid data"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ble/logging/read": {
      "get": {
        "tags": ["Logging"],
        "summary": "Read Logging Config",
        "description": "Retrieve the current logging configuration.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The data in `logged_data` is sourced from the Data Modbus Configuration and consists of one or more selected data points.\n`Logging retention` can be set to 1 week (604800 seconds), 1 month (2592000 seconds), and 3 months (7776000 seconds).\n`Logging interval` can be set to 5 minutes (300 seconds), 10 minutes (600 seconds), and 30 minutes (1800 seconds)",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "logged_data": ["Temperature", "Humidity"],
                "protocol": "MQTT",
                "logging_retention": 7776000,  
                "interval": 300 
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration data successfully obtained"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ble/logging/write": {
      "post": {
        "tags": ["Logging"],
        "summary": "Send the Logging configuration to the client.",
        "description": "Update the logging configuration.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Logging configuration",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "logged_data": {
                  "type": "array",
                  "items": {"type": "string"}
                },
                "protocol": {"type": "string"},
                "logging_retention": {"type": "integer"},
                "interval": {"type": "integer"}
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data successfully sent to the client."
          },
          "400": {
            "description": "Invalid data"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  }
}

Progres 1
  - server advertising
  - client search for available BLE server
  - choose ESP32 BLE server and connect
  - send generated passkey in client to ESP32 BLE server
  - ESP32 BLE server get generated passkey from client via characteristic
  - Compare generated passkey from client and from ESP32 itself
  - if same, print authenticated to screen

Progres 2
  - server advertising
  - client search for available BLE server
  - choose ESP32 BLE server and trying to connect
  - ESP32 generate passkey from itself
  - client generate passkey from itself
  - a popup appears for entering the passkey on the client
  - user input passkey on the pop-up based on generated passkey from client, and send it to BLE server
  - the ESP32 compares the passkey generated by the client with the one generated by the ESP32 itself
  - if same, device authenticated and bonded

Progres 3(auth & AES CBC)
  - all the step at this point same as progres 2
  - rerun py code(client) and choose ESP32 BLE server 
  - client encrypt the data using AES 128 mode cbc, and trying to connect server
  - after connected client send encrypted data to ESP32 BLE server
  - ESP32 BLE server get the data and try to decrypt it
  - after the data has been decrypted, write the data to serial monitor

